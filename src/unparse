#!/usr/bin/env node

// Allows the server to be launched from another directory
process.chdir(__dirname);

// Get argv
var argv = process.argv;
if (argv[0] == 'node') {
	argv = argv.slice(2);
} else {
	argv = argv.slice(1);
}

// Parse argv
var opt = require('node-getopt').create([
	['h' , 'help', 'display this help']
])
.setHelp('Usage: node unparse [OPTIONS]\n'+
	'An open-source clone of Parse.\n\n'+
	'Arguments:\n'+
	'  server  start the server\n'+
	'  init  populate the database with default classes\n\n'+
	'Options:\n[[OPTIONS]]\n')
.bindHelp()
.parseSystem();

switch (opt.argv[0]) {
	case 'init':
		// Initialize unparse
		var crypto = require('crypto');
		var configCtrl = require('./config');
		var db = require('./lib/db');

		/**
		 * Generate a key.
		 * @return {String} The generated key.
		 */
		function generateKey() {
			var sha = crypto.createHash('sha1');
			sha.update(Math.random().toString());
			return sha.digest('hex');
		}

		// Generate app ID and keys if empty
		configCtrl.read().then(function (config) {
			if (!config.appId) {
				config.appId = generateKey();
				process.stdout.write('App ID generated: '+config.appId+'\n');
			}

			var keysNames = ['javascriptKey', 'restKey'];
			for (var i = 0; i < keysNames.length; i++) {
				var keyName = keysNames[i],
					keyValue = config[keyName];

				if (!keyValue) {
					keyValue = generateKey();
					config[keyName] = keyValue;

					process.stdout.write(keyName+' generated: '+keyValue+'\n');
				}
			}

			return configCtrl.write(config);
		}).then(function () {
			// Populate the database with default classes
			process.stdout.write('Connecting to the database...\n');
			return db.connect().then(function () {
				process.stdout.write('Populating database with default classes...\n');
				return db.init();
			}).then(function () {
				process.stdout.write('Database populated with default classes.\n');
				process.exit(0);
			}, function (err) {
				process.stderr.write('Failed to populate the database.\n');
				console.log(err);
				process.exit(1);
			});
		});

		return;
	case 'server':
	default:
		// Start the server
		require('./server');
}